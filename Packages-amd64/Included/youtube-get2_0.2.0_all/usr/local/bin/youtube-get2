#!/bin/bash

# Check if running as root, only for updating youtube-dl
if [ -z `which gsu` ]; then
if [ "`whoami`" != "root" ]; then
export UPDATE='gksu -- youtube-dl -U'
else
export UPDATE="youtube-dl -U"
fi
else
if [ "`whoami`" != "root" ]; then
export UPDATE="gsu youtube-dl -U"
else
export UPDATE="youtube-dl -U"
fi
fi

. /etc/default/locale 2> /dev/null
if [ -z "$LANG" ]; then
[ -e "/usr/share/i18n/charmaps/UTF-8.gz" ] && export LC_CTYPE=en_US.UTF-8
fi

echo -e "Usage: \n - youtube-get2 (without any arguments, brings up the GUI with choices)\n - youtube-get2 url (enter url(s))\n - youtube-get2 playlist (enter playlist url)\n - youtube-get2 user (download from specified user uploads)\n - youtube-get2 search (download from search items)"

# Check for required dependencies
if [ -z `which yad` ]; then
	msg="  You don't have yad installed.\nIt's a dependency of this program.\n Please install it."
	xmessage "`echo -e $msg`"
exit 0
fi

if [ -z `which wget` ]; then
	msg="  You don't have wget installed.\nIt's a dependency of this program.\n Please install it."
	xmessage "`echo -e $msg`"
exit 0
fi

YOUTUBEGET=$(basename $0)
if [ "$(which $YOUTUBEGET)" ]; then
echo "youtube-get2 is installed in PATH"
else
yad --borders 6 --center --title="YouTube-Get" --text=" Script youtube-get2 is not found in PATH \n Please install it in e.g. /usr/local/bin  " --button="gtk-close:0"
exit
fi

# Config file for to remember Downloads folder
if [ ! -f  "$HOME/.config/youtube-get.conf" ]; then
DL_DIR=$HOME
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
else
if [ -z "$(cat "$HOME/.config/youtube-get.conf")" ]; then
DL_DIR=$HOME
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
fi
fi

set_gtkrc()
{
# Yad colored-splash
# Set variables for foreground, background, fontname and text.
[ -z "$FOREGROUND" ] && FOREGROUND="#4B200A"
[ -z "$BACKGROUND" ] && BACKGROUND="#F4E48F"
[ -z "$FONTNAME" ] && FONTNAME="Bold 12"
cat > /tmp/gtkrc.yad <<EOF
style "default" { bg[NORMAL] = "$BACKGROUND" fg[NORMAL] = "$FOREGROUND" font_name="$FONTNAME" } class "GtkWidget"    style "default"
EOF
}

# Set GUI variables up for multi-progress download gui.
TITLE="YAD wget downloader"                 # dialog title
TEXT="             <b>Downloads</b> in progress:"        # dialog text
ICON="dload"                     # window icon (appears in launcher)
IMAGE="dload"   

MAXDLS="5" # set maximum number of simultaneous downloads

QLT="Quality Medium 360p!Quality High 720p!Quality Low 240p (flv)!Quality Lowest 144p (3gp)!Audio Only"
DL_DIR=`cat "$HOME/.config/youtube-get.conf"`
mxl=10
snr=10

cmd=$1

qual_opt() {
if [ "$QLT" = "Quality Medium 360p" ]; then
QUAL=18/34/43/35/5/17
fi
if [ "$QLT" = "Quality High 720p" ]; then
QUAL=22/44/35/43/18/34/5/17
fi
if [ "$QLT" = "Quality Low 240p (flv)" ]; then
QUAL=5
fi
if [ "$QLT" = "Quality Lowest 144p (3gp)" ]; then
QUAL=17
fi
if [ "$QLT" = "Audio Only" ]; then
QUAL=141/171/140
fi
}

function info () {
echo -e ' \nNotes about locales: \n For properly naming downloaded videos with characters other than english in the title (e.g. russian) you need to have the "'locales'" package installed. \n Without it the video files with, for example, russian name will download using the name of the video ID, e.g. OuSdU8tbcHY.mp4  \n In case locales is not installed (and you prefer non-english filename instead video ID), install it (in terminal): \n  apt-get install locales \n (or install with synaptic), then: \n  dpkg-reconfigure locales \n Choose at least one locale and make it the default by choosing it when the last screen appears. \n This change will apply after logout and back in, or a reboot. \n\n A name containing only ansii (e.g. english alphabet) characters works just fine without having to do the above.   ' | yad --margins 7 --title="Info about naming of downloaded video's" --height=420 --width=600 --text-info --wrap --button="gtk-close:0"
}
export -f info

update() {
$UPDATE  | yad --margins 7 --title="Update youtube-dl" --height=200 --width=300 --text-info --wrap --button="gtk-close:0"
}
export -f update

# download file and extract progress, speed and ETA from wget
# we use sed regex for this
# source: http://ubuntuforums.org/showthread.php?t=306515&page=2&p=7455412#post7455412
# modified to work with different locales and decimal point conventions

dload(){
LC_ALL=C wget -c --no-check-certificate -O "$DL_DIR/$FILENAME" "$1" 2>&1 | sed -u \
    "s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:# Downloading at \2\/s, ETA \3/"
    RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
    if [[ "$RET_WGET" = 0 ]]                # check return code for errors
      then
          echo "$2:100%"
          echo "$2:#Download complete."
      else
          echo "$2:#Download error."
    fi
}
export -f dload

iterate () {
IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and 
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

kill $pd
cat "$URILIST" | while read -r URI; read -r FILENAME
do

    if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
      then
          dload "$URI" "$COUNTER"      # if limit reached wait until wget complete
          DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
      else
          dload "$URI" "$COUNTER" &      # pass URI and URI number to download()
          DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
    fi
    COUNTER="$[$COUNTER+1]"        # increment counter

done | yad --center --image-on-top --multi-progress --on-top --auto-kill $YADBARS --title "$TITLE" \
--text "$TEXT" --window-icon "$ICON" --image "$IMAGE"

# ^ launch yad multi progress-bar window
rm -f "$URILIST"
}
export -f iterate

####### Download URL section ######
download() {
kill $pdyad 2> /dev/null
down_load() {
export loglst=`tempfile 2>/dev/null` || loglst=/tmp/test$$
export URILIST=`tempfile 2>/dev/null` || URILIST=/tmp/test$$
tail -f $HOME/.config/youtube-get.conf | yad --center --borders 5 --progress --width=400 --progress-text "Please Wait... Download will start in a moment"  --pulsate --undecorated --no-buttons &
pd=$!

while read -r url; do

qual_opt
URLFILE=$(youtube-dl -g -f $QUAL --get-format --get-filename $url | grep -v "WARNING:" 2>&1 | tee $loglst)
LOG_ERROR="$(cat $loglst | grep 'ERROR' | sed -e 's/\([[:punct:]]\)/ /g' | cut -c1-100)"
rm -f $loglst
if [ -n "$LOG_ERROR" ]; then
kill `jobs -p` $pd 2> /dev/null
yad --title="YouTube-Downloader" --center --text "  Sorry, there was an error, youtube-dl output:\n  ${LOG_ERROR} ...  " --button="gtk-close:0"
continue
fi
rm -f $loglst

URL=$(echo "$URLFILE" | sed -n 1p)
FILE=$(echo "$URLFILE" | sed -n 2p)
FORMAT=$(echo "$URLFILE" | sed -n 3p | awk '{ print $1 }')

FILENAME=$(echo "${FILE%.*}" | sed -e 's/\([[:punct:]]\)/ /g;s/ /-/g;s/^[-\t]*//' | tr -s '-')
ext=$(echo "${FILE##*.}")
echo -e "${URL}\n${FILENAME}.$ext" >> "$URILIST"

if [ $(echo "$FILENAME.$ext" | wc -c) -gt 80 ]; then
YADBAR="$(echo "$FILENAME.$ext" | busybox strings | sed 'N;s/\n//' | cut -c1-80)"
YADBARS="$YADBARS --bar=$YADBAR...:NORM"
else
YADBAR="$(echo "$FILENAME.$ext")"
YADBARS="$YADBARS --bar=$YADBAR:NORM"
fi

done <<< "$choice"

kill `jobs -p` $pd 2> /dev/null
iterate
}

itag_list() {
echo "$LIST" |  awk 'BEGIN {FS=" " } { print $1 }' | grep "^${1}$"
}
export -f itag_list

qual_list() {
LIST=$(youtube-dl -F $url | grep -v "WARNING:")

    itag_list 45
    itag_list 22
    itag_list 44
    itag_list 35
    itag_list 18
    itag_list 43
    itag_list 34
    itag_list 36
    itag_list 5
    itag_list 17
    itag_list 141
    itag_list 171
    itag_list 140
}
export -f qual_list

download_list() {
for url in $choice; do
tail -f $HOME/.config/youtube-get.conf | yad --center --borders 5 --progress --width=400 --progress-text "Initializing... Please Wait..."  --pulsate --undecorated --no-buttons &
pd=$!

export templst=`tempfile 2>/dev/null` || templst=/tmp/test$$
FILE=$(youtube-dl --prefer-ffmpeg --get-filename $url | grep -v "WARNING:" 2>&1 | tee $loglst)
FILENAME=$(echo "${FILE%.*}" | sed -e 's/\([[:punct:]]\)/ /g;s/ /-/g;s/^[-\t]*//' | tr -s '-')
LOG_ERROR="$(cat $loglst | grep 'ERROR' | sed -e 's/\([[:punct:]]\)/ /g' | cut -c1-100)"
rm -f $loglst
if [ -n "$LOG_ERROR" ]; then
kill `jobs -p` $pd 2> /dev/null
yad --title="YouTube-Downloader" --center --text "  Sorry, there was an error, youtube-dl output:\n  ${LOG_ERROR} ...  " --button="gtk-close:0"
continue
fi
rm -f $loglst

qual=$(echo $(qual_list))

for i in $qual; do

[ $i -eq 45 ] && QUAL=720p && ext=webm
[ $i -eq 22 ] && QUAL=720p && ext=mp4
[ $i -eq 44 ] && QUAL=480p && ext=webm
[ $i -eq 35 ] && QUAL=480p && ext=flv
[ $i -eq 18 ] && QUAL=360p && ext=mp4
[ $i -eq 43 ] && QUAL=360p && ext=webm
[ $i -eq 34 ] && QUAL=360p && ext=flv
[ $i -eq 36 ] && QUAL=240p && ext=3gp
[ $i -eq 5 ] && QUAL=240p && ext=flv
[ $i -eq 17 ] && QUAL=144p && ext=3gp
[ $i -eq 141 ] && QUAL=@256k_audio && ext=m4a
[ $i -eq 171 ] && QUAL=@128k_audio && ext=webm
[ $i -eq 140 ] && QUAL=@128k_audio && ext=m4a

echo -e "${i}\n$FILENAME.${ext}\n$QUAL" >> "$templst"
done
kill `jobs -p` $pd 2> /dev/null
ALL=`cat "$templst"`
lst=$(cat "$templst" | yad --image="/usr/share/pixmaps/ytt.png" --window-icon="/usr/share/pixmaps/yt.png" --image-on-top --window-icon="/usr/share/pixmaps/ytt.png" --separator="|" --center --height 500 --width="750" --list --expand-column=2 --title="Download YouTube video" --text="Select one video or audio file to download. " --column Format --column Title --column Quality --hide-column 1 --button="gtk-go-back:2" --button="gtk-cancel:1" --button="gtk-ok:0")
ret=$?
rm -f "$templst"
[[ $ret -eq 1 ]] && sleep 1 && continue
[[ $ret -eq 252 ]] && sleep 1 && continue
[[ $ret -eq 2 ]] && exec $0 url

tail -f $HOME/.config/youtube-get.conf | yad --center --progress --width=400 --progress-text "Please Wait... Download will start in a moment"  --pulsate --undecorated --no-buttons &
pd=$!
#disown
rm -f "$templst"

if [ -z "$lst" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text="    Nothing selected.    " --button="gtk-close:0"
        rm -f "$templst"
sleep 1
continue
fi

export FORMAT=$(echo "$lst" | awk 'BEGIN {FS="|" } { print $1 }')
export NAME=$(echo "$lst" | awk 'BEGIN {FS="|" } { print $2 }')

URL=$(youtube-dl -g -f $FORMAT $url | grep -v "WARNING:")
ext=$(echo "${NAME##*.}")
kill `jobs -p` $pd 2> /dev/null
LC_ALL=C wget -c --no-check-certificate -O "$DL_DIR/$NAME" "$URL" 2>&1 | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | yad --window-icon="/usr/share/pixmaps/yt.png" --borders=7 --text="Downloading $NAME..." --width=500 --auto-kill --auto-close --progress --center --title="Downloading Video..." --button="gtk-cancel:0"
       rm -f "$templst"
sleep 1
continue
done
}

choices=$(yad --image="/usr/share/pixmaps/ytt.png" --window-icon="/usr/share/pixmaps/yt.png" --center --height 300 --image-on-top \
 --title="YouTube-Get" \
 --form --align=center --columns=1 \
 --text="  <b>***  Download from YouTube url  ***</b>" \
--field="Paste here <b>YouTube url(s)</b>  Line by Line...  Example: \nhttp://www.youtube.com/watch?v=OuSdU8tbcHY:TXT" "$choice" \
 --field="Quality (if available)::CB" "$QLT" \
 --field=" Choose quality from download list \n (replaces above quality setting):CHK" "FALSE" \
 --field="Check the box above for advanced quality choice in a list:LBL" "" \
 --field="Downloads folder::DIR" "$DL_DIR" \
 --button="gtk-go-back:2" --button="gtk-cancel:1" --button='gtk-go-forward:0')
ret=$?
echo $ret
[[ $ret -eq 1 ]] && exit
[[ $ret -eq 252 ]] && exit
[[ $ret -eq 2 ]] && exec $0

choices=$(echo "$choices" | tr -d '\r')
#echo "$choices"
choice=$(printf "$choices" | awk 'BEGIN {FS="|" } { print $1 }')
QLT=$(echo $choices | awk 'BEGIN {FS="|" } { print $2 }')
SHOW=$(echo $choices | awk 'BEGIN {FS="|" } { print $3 }')
DL_DIR=$(echo $choices | awk 'BEGIN {FS="|" } { print $5 }')
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
DL_DIR=`cat "$HOME/.config/youtube-get.conf"`

if [ -z "$choice" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text=" You must provide at least one url, \n Please run again." --button="gtk-close:0"
exec $0 url
fi
if [ "$(echo "$choice" | grep "list=\|/channel/")" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text="  One of the URL's looks like a playlist or channel URL  \n  Use 'Download from Playlist' for that " --button="gtk-close:0"
exec $0
fi

if [ "$SHOW" = "TRUE" ]; then
download_list
else
down_load
fi
}
export -f download
##### End Download URL section ######

#######################

##### Download Playlist section #####
playlist() {
kill $pdyad 2> /dev/null
play_list() {
export loglst=`tempfile 2>/dev/null` || loglst=/tmp/test$$

export plist=`tempfile 2>/dev/null` || plist=/tmp/test$$
qual_opt

for arg in $choice
do
tail -f $HOME/.config/youtube-get.conf | yad --center --borders 5 --progress --width=400 --progress-text "Initializing... Please Wait..."  --pulsate --undecorated --no-buttons &
pd=$!

youtube-dl --playlist-end 1 --get-id $arg 2>&1 | tee $loglst 
LOG_ERROR="$(cat $loglst | grep 'ERROR' | sed -e 's/\([[:punct:]]\)/ /g' | cut -c1-100)"
rm -f $loglst
if [ -n "$LOG_ERROR" ]; then
kill `jobs -p` $pd 2> /dev/null
yad --title="YouTube-Downloader" --center --text "  Sorry, there was an error, youtube-dl output:\n  ${LOG_ERROR} ...  " --button="gtk-close:0"
exit
fi
rm -f $loglst

youtube-dl -sci -f $QUAL --get-format --get-filename --playlist-end $mxl -o "%(autonumber)03d-%(title)s-%(id)s.%(ext)s" $arg > $plist
#echo "${ID}" >> $plist

sed -n 1~2p $plist | while read FILE; do
NAME=$(echo "${FILE%.*}" | sed -e 's/\([[:punct:]]\)/ /g;s/ /-/g;s/^[-\t]*//' | tr -s '-')
sed -i "s|${FILE%.*}|${NAME}|g" $plist
done
kill `jobs -p` $pd 2> /dev/null

lst=$(cat $plist | yad --window-icon="/usr/share/pixmaps/yt.png" --image="/usr/share/pixmaps/yt.png" --image-on-top --separator="|" --center --height 600 --width="800" --list --title="Download YouTube video(s)" --multiple --text="Download YouTube video(s. \nSelect (multiple) items to download." --column Name --column Quality --print-column 0 --button="gtk-go-back:2" --button="gtk-cancel:1" --button="gtk-ok:0")
ret=$?
rm -f $plist
[[ $ret -eq 1 ]] && sleep 1 && continue
[[ $ret -eq 252 ]] && sleep 1 && continue
[[ $ret -eq 2 ]] && exec $0 playlist

if [ -z "$lst" ]; then
yad --center --borders 6 --center --title="YouTube Downloader" --text="    Nothing selected.    " --button="gtk-close:0"
sleep 1
continue
fi
tail -f $HOME/.config/youtube-get.conf | yad --center --progress --width=400 --progress-text "Please Wait... Download will start in a moment"  --pulsate --undecorated --no-buttons &
pd=$!

export URILIST=`tempfile 2>/dev/null` || URILIST=/tmp/test$$
while read i
do

NUM=$(echo $i | awk 'BEGIN {FS="|" } { print $1 }' | cut -c1-3)
NUM=$((10#$NUM))
NUM=$(printf "%d\n" "$NUM")

FILENAME=$(echo $i | awk 'BEGIN {FS="|" } { print $1 }')
#url=$(echo $i | awk 'BEGIN {FS="|" } { print $3 }')
URL=$(youtube-dl -g --playlist-start $NUM --playlist-end $NUM -f $QUAL $arg)
echo -e "${URL}\n${FILENAME}" >> "$URILIST"
YADBAR="$(echo "$FILENAME" | cut -c1-100)"
YADBARS="$YADBARS --bar=$YADBAR:NORM"
done <<< "$lst"

kill `jobs -p` $pd 2> /dev/null
iterate
sleep 1 && continue

done
exit 0
}

choices=$(yad --image="/usr/share/pixmaps/ytt.png" --window-icon="/usr/share/pixmaps/yt.png" --center --height 300 --image-on-top \
 --title="YouTube-Get" \
 --form --align=left --columns=1 \
 --text="  <b>*** Download from YouTube Playlist or Channel url ***</b> \n      (including  <b>playlist?list=</b>,  <b>list=</b> or <b>/channel/</b>   in the url)" \
--field="Paste here a <b>YouTube playlist or channel url</b>    Example: \nhttps://www.youtube.com/watch?v=dBkoxR6eSQU&amp;list=PLD9297906BD0DCDEB     :TXT" "$choice" \
 --field="Quality (if available)::CB" "$QLT" \
 --field="A list will display, set the maximum items to show::LBL" "" \
   --field="Maximum list items                                              :NUM" "$mxl!1..1000!1" \
 --field="Downloads folder::DIR" "$DL_DIR" \
 --button="gtk-go-back:2" --button="gtk-cancel:1" --button='gtk-go-forward:0')
ret=$?
echo $ret
[[ $ret -eq 1 ]] && exit
[[ $ret -eq 252 ]] && exit
[[ $ret -eq 2 ]] && exec $0

choices=$(echo "$choices" | tr -d '\r')
#echo "$choices"
choice=$(printf "$choices" | awk 'BEGIN {FS="|" } { print $1 }')
QLT=$(echo $choices | awk 'BEGIN {FS="|" } { print $2 }')
mxl=$(echo $choices | awk 'BEGIN {FS="|" } { print $4 }' | sed 's/\(.*\)......./\1/')
DL_DIR=$(echo $choices | awk 'BEGIN {FS="|" } { print $5 }')
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
DL_DIR=`cat "$HOME/.config/youtube-get.conf"`

if [ -z "$choice" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text=" You must provide at least one url, \n Please run again." --button="gtk-close:0"
exec $0 playlist
fi
PLIST=$(echo "$choice" | grep "list=\|/channel/")
 if [ -n "$PLIST" ]; then
play_list
else
yad --borders 6 --center --title="YouTube Downloader" --text=" The url you provided is not a playlist url.\n Please try again" --button="gtk-close:0"
exec $0 playlist
fi
}
export -f playlist 
##### End Download Playlist section ######

################################

##### Download User section #####
user() {
kill $pdyad 2> /dev/null
d_user() {
export loglst=`tempfile 2>/dev/null` || loglst=/tmp/test$$
export plist=`tempfile 2>/dev/null` || plist=/tmp/test$$
tail -f $HOME/.config/youtube-get.conf | yad --center --borders 5 --progress --width=400 --progress-text "Initializing... Please Wait..."  --pulsate --undecorated --no-buttons &
pd=$!
#disown
qual_opt
TEST=$(youtube-dl --playlist-end 1 --get-id $choice 2>&1 | tee $loglst) 
LOG_ERROR="$(cat $loglst | grep 'ERROR' | sed -e 's/\([[:punct:]]\)/ /g' | cut -c1-100)"
rm -f $loglst
if [ -n "$LOG_ERROR" ]; then
kill `jobs -p` $pd 2> /dev/null
yad --center --title="YouTube-Downloader" --center --text "  Sorry, there was an error, youtube-dl output:\n  ${LOG_ERROR} ...  " --button="gtk-close:0"
exit
fi
rm -f $loglst
for arg in $choice
do

youtube-dl -sci -f $QUAL --get-format --get-filename --playlist-end $mxl -o "%(autonumber)03d-%(title)s-%(id)s.%(ext)s" $arg > $plist
#echo "${ID}" >> $plist

sed -n 1~2p $plist | while read FILE; do
NAME=$(echo "${FILE%.*}" | sed -e 's/\([[:punct:]]\)/ /g;s/ /-/g;s/^[-\t]*//' | tr -s '-')
sed -i "s|${FILE%.*}|${NAME}|g" $plist
done
kill `jobs -p` $pd 2> /dev/null

lst=$(cat $plist | yad --window-icon="/usr/share/pixmaps/yt.png" --image="/usr/share/pixmaps/yt.png" --image-on-top --separator="|" --center --height 600 --width="800" --list --title="Download YouTube video(s)" --multiple --text="Download YouTube video(s. \nSelect (multiple) items for download." --column Name --column Quality --print-column 0 --button="gtk-go-back:2" --button="gtk-cancel:1" --button="gtk-ok:0")
ret=$?
rm -f $plist
[[ $ret -eq 1 ]] && sleep 1 && continue
[[ $ret -eq 252 ]] && sleep 1 && continue
[[ $ret -eq 2 ]] && exec $0 user

if [ -z "$lst" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text="    Nothing selected.    " --button="gtk-close:0"
sleep 1
continue
fi
tail -f $HOME/.config/youtube-get.conf | yad --center --progress --width=400 --progress-text "Please Wait... Download will start in a moment"  --pulsate --undecorated --no-buttons &
pd=$!

export URILIST=`tempfile 2>/dev/null` || URILIST=/tmp/test$$
while read i
do

NUM=$(echo $i | awk 'BEGIN {FS="|" } { print $1 }' | cut -c1-3)
NUM=$((10#$NUM))
NUM=$(printf "%d\n" "$NUM")

FILENAME=$(echo $i | awk 'BEGIN {FS="|" } { print $1 }')
#url=$(echo $i | awk 'BEGIN {FS="|" } { print $3 }')
URL=$(youtube-dl -g --playlist-start $NUM --playlist-end $NUM -f $QUAL $arg)
echo -e "${URL}\n${FILENAME}" >> "$URILIST"

YADBARS="$YADBARS --bar=$FILENAME:NORM"
done <<< "$lst"
kill `jobs -p` $pd 2> /dev/null

iterate

sleep 1 && continue
done
exit 0
}

choices=$(yad --image="/usr/share/pixmaps/ytt.png" --window-icon="/usr/share/pixmaps/yt.png" --center --height 300 --image-on-top \
 --title="YouTube-Get" \
 --form --align=left --columns=1 \
 --text=" <b>*** Download from YouTube User Uploads ***</b> \n Type below a <b>YouTube User Name</b> (without any spaces)\n Example:  <b>puppylinuxworld</b>" \
--field="Youtube User:" "$choice" \
 --field="Quality (if available)::CB" "$QLT" \
 --field="A list will display, set the maximum items to show:         :LBL" "" \
   --field="Maximum list items :NUM" "$mxl!1..1000!1" \
 --field="Downloads folder::DIR" "$DL_DIR" \
 --button="gtk-go-back:2" --button="gtk-cancel:1" --button='gtk-go-forward:0')
ret=$?
echo $ret
[[ $ret -eq 1 ]] && exit
[[ $ret -eq 252 ]] && exit
[[ $ret -eq 2 ]] && exec $0

choices=$(echo "$choices" | tr -d '\r')
#echo "$choices"
choice=$(printf "$choices" | awk 'BEGIN {FS="|" } { print $1 }')
QLT=$(echo $choices | awk 'BEGIN {FS="|" } { print $2 }')
mxl=$(echo $choices | awk 'BEGIN {FS="|" } { print $4 }' | sed 's/\(.*\)......./\1/')
DL_DIR=$(echo $choices | awk 'BEGIN {FS="|" } { print $5 }')
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
DL_DIR=`cat "$HOME/.config/youtube-get.conf"`
choice=ytuser:$choice

if [ -z "$choice" ]; then
yad --center --borders 6 --center --title="YouTube Downloader" --text=" You must provide a username, \n Please try again." --button="gtk-close:0"
exec $0 playlist
fi
PLIST=$(echo "$choice" | grep "ytuser:")
 if [ -n "$PLIST" ]; then
d_user
else
yad --center --borders 6 --center --title="YouTube Downloader" --text=" You did not provide a valid username.\n Please try again" --button="gtk-close:0"
exec $0 playlist
fi
}
export -f user 
##### End Download User section ######

################################

##### Search YouTube videos #####
search() {
kill $pdyad 2> /dev/null
search_list() {
export loglst=`tempfile 2>/dev/null` || loglst=/tmp/test$$
export URILIST=`tempfile 2>/dev/null` || URILIST=/tmp/test$$
tail -f $HOME/.config/youtube-get.conf | yad --center --borders 5 --progress --width=400 --progress-text "Initializing... Please Wait..."  --pulsate --undecorated --no-buttons &
pd=$!
#disown
qual_opt
youtube-dl --get-format ytsearch1:"$srch" 2>&1 | tee $loglst
LOG_ERROR="$(cat $loglst | grep 'ERROR' | sed -e 's/\([[:punct:]]\)/ /g' | cut -c1-100)"
rm -f "$loglst"
if [ -n "$LOG_ERROR" ]; then
kill `jobs -p` $pd 2> /dev/null
yad --title="YouTube-Downloader" --center --text "  Sorry, there was an error, youtube-dl output:\n  ${LOG_ERROR} ...  " --button="gtk-close:0"
exit
fi
rm -f "$loglst"

search=ytsearch$snr:$srch
search=$(printf "$search")
srchfiles="$(youtube-dl -scie -f $QUAL --get-filename --get-format -o "%(autonumber)03d-%(title)s-%(id)s.%(ext)s" "$search" | sed 's|["'\'':@\$%|^&]||g')"

kill `jobs -p` $pd 2> /dev/null
 
srchfile="$(echo "$srchfiles" | yad --image="/usr/share/pixmaps/yt.png" --window-icon="/usr/share/pixmaps/yt.png" --image-on-top --separator="|" --center --height 600 --width="750" --list --title="Download YouTube video(s)" --multiple --text="Download YouTube video(s) and/or Audio. \nSelect (multiple) items to download."  --column Title  --column Name --column Quality --hide-column=1 --print-column 0 --button="gtk-go-back:2" --button="gtk-cancel:1" --button="gtk-ok:0")"
ret=$?

[[ $ret -eq 1 ]] && rm -f "$URILIST" && exit
[[ $ret -eq 252 ]] && rm -f "$URILIST" && exit
[[ $ret -eq 2 ]] && rm -f "$URILIST" && exec $0 search

if [ -z "$srchfile" ]; then
yad --borders 6 --center --title="YouTube Downloader" --text="    Nothing selected.    " --button="gtk-close:0"
exit
fi
tail -f $HOME/.config/youtube-get.conf | yad --center --progress --width=400 --progress-text "Please Wait... Download will start in a moment"  --pulsate --undecorated --no-buttons &
pd=$!

while read line
do
echo line=$line
title=$(echo "$line" | awk 'BEGIN {FS="|" } { print $1 }' | busybox strings)
title=$(echo $title)
echo $title

NUM=$(echo $line | awk 'BEGIN {FS="|" } { print $2 }' | cut -c1-3)
NUM=$((10#$NUM))
NUM=$(printf "%d\n" "$NUM")

URL=$(youtube-dl -g -f $QUAL "$search" --playlist-start $NUM --playlist-end $NUM)
FNAME=$(echo $line | awk 'BEGIN {FS="|" } { print $2 }')
FNAME=$(echo $FNAME)

FILENAME=$(echo "${FNAME%.*}" | sed -e 's/\([[:punct:]]\)/ /g;s/ /-/g;s/^[-\t]*//' | tr -s '-')
ext=$(echo "${FNAME##*.}")
echo -e "${URL}\n${FILENAME}.$ext" >> "$URILIST"
echo "$FILENAME"
YADBAR="$(echo "$FILENAME.$ext" | cut -c1-100)"
echo $YADBAR
YADBARS="$YADBARS --bar=$YADBAR:NORM"
done <<< "$srchfile"

kill `jobs -p` $pd 2> /dev/null

iterate
}

choices=$(yad --image="/usr/share/pixmaps/ytt.png" --window-icon="/usr/share/pixmaps/yt.png" --center --height 300 --image-on-top \
 --title="YouTube-Get" \
 --form --align=left --columns=1 \
 --text=" <b>*** Search for YouTube videos ***</b> \n Type below a search query (may contain spaces)\n Example:  <b>the beatles</b>" \
--field="Search YouTube videos:" "$srch" \
 --field="Quality (if available)::CB" "$QLT" \
 --field="A list will display, set the maximum search items to show:         :LBL" "" \
   --field="Maximum search items :NUM" "$snr!1..1000!1" \
 --field="Downloads folder::DIR" "$DL_DIR" \
 --button="gtk-go-back:2" --button="gtk-cancel:1" --button='gtk-go-forward:0')
ret=$?
echo $ret
[[ $ret -eq 1 ]] && exit
[[ $ret -eq 252 ]] && exit
[[ $ret -eq 2 ]] && exec $0

choices=$(echo "$choices" | tr -d '\r')
#echo "$choices"

srch=$(echo $choices | awk 'BEGIN {FS="|" } { print $1 }')
QLT=$(echo $choices | awk 'BEGIN {FS="|" } { print $2 }')
snr=$(echo $choices | awk 'BEGIN {FS="|" } { print $4 }' | sed 's/\(.*\)......./\1/')
DL_DIR=$(echo $choices | awk 'BEGIN {FS="|" } { print $5 }')
echo "$DL_DIR" > "$HOME/.config/youtube-get.conf"
DL_DIR=`cat "$HOME/.config/youtube-get.conf"`

if [ -z "$srch" ]; then
yad --center --borders 6 --center --title="YouTube Downloader" --text=" You must type a search query , \n Please try again." --button="gtk-close:0"
exec $0 search
fi
search_list
}
export -f search

if [ -z "$cmd" ]; then
yad --icons --read-dir "/usr/local/youtube-get2" --image /usr/share/pixmaps/ytt.png --window-icon="/usr/share/pixmaps/yt.png" --center --height 300 --image-on-top \
 --title="YouTube-Get" \
 --item-width 140 --single-click --geometry="640x270" --text " <b>*** YouTube-Get v2 ***</b> \n A YouTube Downloader frontend for <b>youtube-dl</b> \n Single click on the item of your choice \n Hover your mouse over items for more information" --button="gtk-info:bash -c info" --button="Update youtube-dl:bash -c update" --buttons-layout spread
fi

export pdyad="`ps -eo pid,cmd | grep -v grep | grep "yad --icons --read-dir /usr/local/youtube-get2" | awk '{ print $1 }'`"

if [ "$cmd" = "url" ]; then
download &
disown
fi

if [ "$cmd" = "playlist" ]; then
playlist &
disown
fi

if [ "$cmd" = "user" ]; then
user &
disown
fi

if [ "$cmd" = "search" ]; then
search &
disown
fi
exit
